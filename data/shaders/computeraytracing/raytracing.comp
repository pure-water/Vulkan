// Shader is looseley based on the ray tracing coding session by Inigo Quilez (www.iquilezles.org)

#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform writeonly image2D resultImage;

#define EPSILON 0.0001
#define MAXLEN 1000.0
#define SHADOW 0.4
#define RAYBOUNCES 2
//#define RAYBOUNCES 
#define REFLECTIONS true
//#define REFLECTIONS false
#define REFLECTIONSTRENGTH 0.4
#define REFLECTIONFALLOFF 0.5

#define PI 3.1415926535
#define TEX_W 1024
#define TEX_H 1024

struct Camera 
{
	vec3 pos;   
	vec3 lookat;
	float fov; 
};

layout (binding = 1) uniform UBO 
{
	vec3 lightPos;
	float aspectRatio;
	vec4 fogColor;
	vec4 WorldOffset;
	vec4 Rotation;
	Camera camera;
	mat4 rotMat;  //yaogang: pass this as the transform
} ubo;

struct Sphere 
{
	vec3 pos;
	float radius;
	vec3 diffuse;
	float specular;
	int id;
};

struct Plane
{
	vec3 normal;
	float distance;
	vec3 diffuse;
	float specular;
	int id;
	int tex_width;
	int tex_height;
};


vec2 MapTex(vec3 pos, float r,vec4 timer,vec4 LatRot) {

     vec2 texpos; 
	 float speed = (r > 1.3f) ? 3.0f : ((r <= 0.5f) ? 22.0f: 7.0f);



	 float phi0     =  (atan((pos.y)/pos.x))+timer.w*speed;
     float phi1     = phi0;
	 
	 if (phi0 >= PI) {
	       phi1 = phi0 - ceil(phi0/(2.0 * PI)) * 2.0 * PI;
     } 
	 
	 else if (phi0 < -1.0f * PI) {
	       phi1 = PI - (phi0-PI);
	 }
     

	
	 texpos.x =  phi1/(2.0f*PI)+0.5f;

	 if ( r > 1.2f) {
        texpos.y =   (acos((pos.z)/r))/(PI );
	}
	 else {
	    texpos.y = acos(pos.z/r)/PI;
	}
	 
    
	 return texpos;
}

layout (std140, binding = 2) buffer Spheres
{
	Sphere spheres[ ];
};

layout (std140, binding = 3) buffer Planes
{
	Plane planes[ ];
};

layout (binding = 4, rgba8) uniform readonly image2D inputImage0;
layout (binding = 5, rgba8) uniform readonly image2D inputImage1;
layout (binding = 6, rgba8) uniform readonly image2D inputImage2;
layout (binding = 7, rgba8) uniform readonly image2D inputImage3;
layout (binding = 8, rgba8) uniform readonly image2D inputImage4;
layout (binding = 9, rgba8) uniform readonly image2D inputImage5;
layout (binding = 10, rgba8) uniform readonly image2D inputImage6;
layout (binding = 11, rgba8) uniform readonly image2D inputImage7;



void reflectRay(inout vec3 rayD, in vec3 mormal)
{
	rayD = rayD + 2.0 * -dot(mormal, rayD) * mormal;
}	

// Lighting =========================================================

float lightDiffuse(vec3 normal, vec3 lightDir) 
{
	return clamp(dot(normal, lightDir), 0.1, 1.0);
}

float lightSpecular(vec3 normal, vec3 lightDir, float specularFactor)
{
	vec3 viewVec = normalize(ubo.camera.pos);
	vec3 halfVec = normalize(lightDir + viewVec);
	return pow(clamp(dot(normal, halfVec), 0.0, 1.0), specularFactor);
}

// Sphere ===========================================================

float sphereIntersect(in vec3 rayO, in vec3 rayD, in Sphere sphere,in vec4 timer)
{
	vec3 oc = rayO - (sphere.pos + timer.xyz);
	float b = 2.0 * dot(oc, rayD);
	//float c = dot(oc, oc) - sphere.radius*sphere.radius  * timer.w*timer.w;
	float c = dot(oc, oc) - sphere.radius*sphere.radius ;

	float h = b*b - 4.0*c;
	if (h < 0.0) 
	{
		return -1.0;
	}
	float t = (-b - sqrt(h)) / 2.0;

	return t;
}

vec3 sphereNormal(in vec3 pos, in Sphere sphere, in vec4 timer)
{
	//return (pos - (sphere.pos + timer.xyz)) / (sphere.radius*timer.w);
	return (pos - (sphere.pos + timer.xyz)) / (sphere.radius);

}

// Plane ===========================================================

float planeIntersect(vec3 rayO, vec3 rayD, Plane plane)
{
	float d = dot(rayD, plane.normal);

	if (d == 0.0)
		return 0.0;

	float t = -(plane.distance + dot(rayO, plane.normal)) / d;

	if (t < 0.0)
		return 0.0;

	return t;
}

	
int intersect(in vec3 rayO, in vec3 rayD, inout float resT,in vec4 timer)
{
	int id = -1;

	for (int i = 0; i < spheres.length(); i++)
	{
		float tSphere = sphereIntersect(rayO, rayD, spheres[i],timer
		);
		if ((tSphere > EPSILON) && (tSphere < resT))
		{
			id = spheres[i].id;
			resT = tSphere;
		}
	}	

	for (int i = 0; i < planes.length(); i++)
	{
		float tplane = planeIntersect(rayO, rayD, planes[i]);
		if ((tplane > EPSILON) && (tplane < resT))
		{
			id = planes[i].id;
			resT = tplane;
		}	
	}
	
	return id;
}

float calcShadow(in vec3 rayO, in vec3 rayD, in int objectId, inout float t,in vec4 timer)
{
	for (int i = 0; i < spheres.length(); i++)
	{
		if (spheres[i].id == objectId)
			continue;
		float tSphere = sphereIntersect(rayO, rayD, spheres[i],timer);
		if ((tSphere > EPSILON) && (tSphere < t))
		{
			t = tSphere;
			return SHADOW;  //it could be both hard shadow and soft shadow
		}
	}		
	return 1.0;
}

vec3 fog(in float t, in vec3 color)
{
	return mix(color, ubo.fogColor.rgb, clamp(sqrt(t*t)/20.0, 0.0, 1.0));
}

vec3 renderScene(inout vec3 rayO, inout vec3 rayD, inout int id, in vec4 timer)
{
	vec3 color = vec3(0.0);  //background color is black
	float t = MAXLEN;
	
	// Get intersected object ID
	int objectID = intersect(rayO, rayD, t,timer);
	
	if (objectID == -1)
	{
		return color;
	}
	
	vec3 pos = rayO + t * rayD;
	vec3 lightVec = normalize(ubo.lightPos - pos);				
	vec3 normal;

	// Planes

	// Spheres



	// uvec3 gl_NumWorkGroups Number of work groups, same as what was passedin glDispatchCompute.
    // uvec3 gl_WorkGroupID The current work group for a shaderinvocation.
    // uvec3 gl_LocalInvocationID The current invocation of the shader withinthe work group. May be thought of as the IDof the current thread within in the current work group.
    // uvec3 gl_GlobalInvocationID The unique ID of the current invocationacross all invocations.
    // gluint gl_LocalInvocationIndex The unique ID of an invocation within awork group.

	for (int i = 0; i < planes.length(); i++)
	{
		if (objectID == planes[i].id)
		{
			normal = planes[i].normal;
			float diffuse = lightDiffuse(normal, lightVec);
			float specular = lightSpecular(normal, lightVec, planes[i].specular);
			color = diffuse * planes[i].diffuse + specular;

			//the following code works,we sample a texture manually
			//if (i == 2) {
			 if ( 0 == 1) {
			  vec3 rgb = imageLoad(inputImage0, ivec2((gl_GlobalInvocationID.x)/2,(2*TEX_W-gl_GlobalInvocationID.y)/2)).rgb;
		      color = diffuse * rgb + specular;
			 }
			 
		}
	}

	for (int i = 0; i < spheres.length(); i++)
	{
		if (objectID == spheres[i].id)
		{
			normal = sphereNormal(pos, spheres[i],timer);	
			float diffuse = lightDiffuse(normal, lightVec);
			float specular = lightSpecular(normal, lightVec, spheres[i].specular);
			color = diffuse * spheres[i].diffuse + specular;
			

			// we come back to 1st principle to use this to calculate longtitude and latitude http://mathworld.wolfram.com/SphericalCoordinates.html
			vec3  PtOnOrigin = pos - spheres[i].pos;
    	    vec2 texpos = MapTex(PtOnOrigin,spheres[i].radius,timer,ubo.Rotation);

			if ( spheres[i].radius > 0.5f) {
			 //translate evrythign back to origin and translation matrix is additive
			 vec3 sphere_texture = imageLoad(inputImage0, ivec2(texpos.x*TEX_W,texpos.y*TEX_H)).rgb;
			 color = diffuse * sphere_texture + specular;
			}

			else if (spheres[i].radius == 0.5f) {
			 vec3 sphere_texture = imageLoad(inputImage1, ivec2(texpos.x*TEX_W,texpos.y*TEX_H)).rgb;
			 color = diffuse * sphere_texture + specular;

			}

			else if (spheres[i].radius == 0.5f) {
			 vec3 sphere_texture = imageLoad(inputImage1, ivec2(texpos.x*TEX_W,texpos.y*TEX_H)).rgb;
			 color = diffuse * sphere_texture + specular;

			}

			else if (spheres[i].pos.y < 0.0f) {

			   if (spheres[i].pos.z  > 0.0f ) {
        			 vec3 sphere_texture = imageLoad(inputImage2, ivec2(texpos.x*TEX_W,texpos.y*TEX_H)).rgb;
		        	 color = diffuse * sphere_texture + specular;
			   }
			   else {
        			 vec3 sphere_texture = imageLoad(inputImage3, ivec2(texpos.x*TEX_W,texpos.y*TEX_H)).rgb;
		        	 color = diffuse * sphere_texture + specular;
			   }

			}

			else {
			    if (spheres[i].pos.x < -2.0f || spheres[i].pos.x > 2.0f) {

					vec3 sphere_texture = imageLoad(inputImage4, ivec2(texpos.x*TEX_W,texpos.y*TEX_H)).rgb;
		        	 color = diffuse * sphere_texture + specular;
				}

				else if (spheres[i].pos.x < -1.0f || spheres[i].pos.x > 1.0f) {

					vec3 sphere_texture = imageLoad(inputImage5, ivec2(texpos.x*TEX_W,texpos.y*TEX_H)).rgb;
		        	 color = diffuse * sphere_texture + specular;
				}

				else if (spheres[i].pos.x < -0.5f || spheres[i].pos.x > 0.5f) {

					vec3 sphere_texture = imageLoad(inputImage5, ivec2(texpos.x*TEX_W,texpos.y*TEX_H)).rgb;
		        	 color = diffuse * sphere_texture + specular;
				}
				else {

					vec3 sphere_texture = imageLoad(inputImage5, ivec2(texpos.x*TEX_W,texpos.y*TEX_H)).rgb;
		        	 color = diffuse * sphere_texture + specular;
				}


			}

		}
	}

	if (id == -1)
		return color;

	id = objectID;

	// Shadows
	t = length(ubo.lightPos - pos);
	color *= calcShadow(pos, lightVec, id, t,timer);
	
	// Fog
	//color = fog(t, color);	
	
	// Reflect ray for next render pass
	reflectRay(rayD, normal);
	rayO = pos;	
	
	return color;
}


//** yaogang 
//** manual texture looking up function on a sphere

void main()
{
	ivec2 dim = imageSize(resultImage);	
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;
	vec4 timer = ubo.WorldOffset.xyzw; //animation results 
	vec3 rayO = ubo.camera.pos;
	vec3 rayD = normalize(vec3((-1.0 + 2.0 * uv) * vec2(ubo.aspectRatio, 1.0), -1.0)); //-1.0 , this is where image plane is 

		
	// Basic color path
	int id = 0;
	vec3 finalColor = renderScene(rayO, rayD, id,timer);


	
	// Reflection
	
	if (REFLECTIONS)
	{
		float reflectionStrength = REFLECTIONSTRENGTH;
		for (int i = 0; i < RAYBOUNCES; i++)
		{
			vec3 reflectionColor = renderScene(rayO, rayD, id,timer);
			finalColor = (1.0 - reflectionStrength) * finalColor + reflectionStrength * mix(reflectionColor, finalColor, 1.0 - reflectionStrength);			
			reflectionStrength *= REFLECTIONFALLOFF;
		}
	}
	
	//finalColor = vec3(ubo.rotMat[0][0],ubo.rotMat[1][1],ubo.rotMat[2][2]);
	//finalColor = ubo.Rotation.xyz;
	//vec3 ff_color = pow(finalColor,0.1f);
    finalColor = vec3(pow(finalColor.x, .54f),pow(finalColor.y,.54f),pow(finalColor.z,.54f));
	//finalColor = vec3(1.0f);
	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(finalColor, 0.0));
}		